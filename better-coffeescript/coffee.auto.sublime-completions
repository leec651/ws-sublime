{
  "scope": "source.coffee - variable.other.coffee",
  "completions": [
    // personal shortcuts
    {
      "trigger": "__dirname",
      "contents": "__dirname$0"
    },
    {
      "trigger": "JSON.stringify(space=2)",
      "contents": "JSON.stringify($0, null, 2)"
    },
    {
      "trigger": "JSON.stringify()",
      "contents": "JSON.stringify($0)"
    },
    // nodejs library
    {
      "trigger": "clearImmediate",
      "contents": "clearImmediate ${1:immediate}"
    },
    {
      "trigger": "clearInterval",
      "contents": "clearInterval ${1:timer}"
    },
    {
      "trigger": "clearTimeout",
      "contents": "clearTimeout ${1:timer}"
    },
    {
      "trigger": "setImmediate",
      "contents": "setImmediate ${1:callback}"
    },
    {
      "trigger": "setInterval",
      "contents": "setInterval ${1:callback}, ${2:repeat}"
    },
    {
      "trigger": "setTimeout",
      "contents": "setTimeout ${1:callback}, ${2:after}"
    },
    {
      "trigger": "process.uptime",
      "contents": "process.uptime("
    },
    {
      "trigger": "process.nextTick",
      "contents": "process.nextTick ->$0"
    },
    {
      "trigger": "process.exit",
      "contents": "process.exit(${1:code})$0"
    },
    {
      "trigger": "process.emit",
      "contents": "process.emit(${1:type})$0"
    },
    {
      "trigger": "process.on",
      "contents": "process.on '${1:type}', ${2:listener}"
    },
    {
      "trigger": "process.once",
      "contents": "process.once '${1:type}', ${2:listener}"
    },
    {
      "trigger": "console.table",
      "contents": "console.table ${1:object}"
    },
    {
      "trigger": "console.error",
      "contents": "console.error $0"
    },
    {
      "trigger": "console.warn",
      "contents": "console.warn $0"
    },
    {
      "trigger": "console.count",
      "contents": "console.count $0"
    },
    {
      "trigger": "console.assert",
      "contents": "console.assert ${1:bool}"
    },
    {
      "trigger": "console.time",
      "contents": "console.time '${1:name}'"
    },
    {
      "trigger": "console.timeEnd",
      "contents": "console.timeEnd '${1:name}'"
    },
    {
      "trigger": "fs-exists",
      "contents": "fs.exists ${1:name}, ->$0"
    },
    {
      "trigger": "fs-existsSync",
      "contents": "fs.existsSync(${1:name})$0"
    },
    {
      "trigger": "fs-unlink",
      "contents": "fs.unlink ${1:name}, ->$0"
    },
    {
      "trigger": "fs-unlinkSync",
      "contents": "fs.unlinkSync ${1:name}"
    },
    {
      "trigger": "fs-readFile",
      "contents": "fs.readFile ${1:name}, '${2:utf8}', ->$0"
    },
    {
      "trigger": "fs-readFileSync",
      "contents": "fs.readFileSync(${1:name}, '${2:utf8}')$0"
    },
    {
      "trigger": "fs-close",
      "contents": "fs.close(${1:fd}, ${2:callback})$0"
    },
    {
      "trigger": "fs-closeSync",
      "contents": "fs.closeSync(${1:fd})$0"
    },
    {
      "trigger": "fs-rename",
      "contents": "fs.rename(${1:oldPath}, ${2:newPath}, ${3:callback})$0"
    },
    {
      "trigger": "fs-renameSync",
      "contents": "fs.renameSync(${1:oldPath}, ${2:newPath})$0"
    },
    {
      "trigger": "fs-rmdir",
      "contents": "fs.rmdir(${1:name}, ${2:callback})$0"
    },
    {
      "trigger": "fs-rmdirSync",
      "contents": "fs.rmdirSync(${1:name})$0"
    },
    {
      "trigger": "fs-mkdir",
      "contents": "fs.mkdir(${1:name}, ${2:mode}, ${3:callback})$0"
    },
    {
      "trigger": "fs-mkdirSync",
      "contents": "fs.mkdirSync(${1:name}, ${2:mode})$0"
    },
    {
      "trigger": "fs-readdir",
      "contents": "fs.readdir(${1:name}, ${2:options}, ${3:callback})$0"
    },
    {
      "trigger": "fs-readdirSync",
      "contents": "fs.readdirSync(${1:name}, ${2:options})$0"
    },
    {
      "trigger": "fs-stat",
      "contents": "fs.stat ${1:name}, ${2:callback}"
    },
    {
      "trigger": "fs-statSync",
      "contents": "fs.statSync(${1:name})$0"
    },
    {
      "trigger": "fs-chmod",
      "contents": "fs.chmod(${1:name}, ${2:mode}, ${3:callback})$0"
    },
    {
      "trigger": "fs-chmodSync",
      "contents": "fs.chmodSync(${1:name}, ${2:mode})$0"
    },
    {
      "trigger": "fs-writeFile",
      "contents": "fs.writeFile(${1:name}, ${2:data}, ${3:options}, ${4:callback})$0"
    },
    {
      "trigger": "fs-writeFileSync",
      "contents": "fs.writeFileSync(${1:name}, ${2:data}, ${3:options})$0"
    },
    {
      "trigger": "fs-appendFile",
      "contents": "fs.appendFile(${1:name}, ${2:data}, ${3:options}, ${4:callback})$0"
    },
    {
      "trigger": "fs-appendFileSync",
      "contents": "fs.appendFileSync(${1:name}, ${2:data}, ${3:options})$0"
    },
    {
      "trigger": "fs-watch",
      "contents": "fs.watch(${1:filename}, ${2:options}, ${3:listener})$0"
    },
    {
      "trigger": "fs-watchFile",
      "contents": "fs.watchFile(${1:filename}, ${2:options}, ${3:listener})$0"
    },
    {
      "trigger": "fs-copyFile",
      "contents": "fs.copyFile(${1:src}, ${2:dest}, ${3:flags}, ${4:callback})$0"
    },
    {
      "trigger": "fs-copyFileSync",
      "contents": "fs.copyFileSync(${1:src}, ${2:dest}, ${3:flags})$0"
    },
    {
      "trigger": "fs-createReadStream",
      "contents": "fs.createReadStream(${1:name}, ${2:options})$0"
    },
    {
      "trigger": "fs-createWriteStream",
      "contents": "fs.createWriteStream(${1:name}, ${2:options})$0"
    },
    {
      "trigger": "net.connect",
      "contents": "net.connect(${1:...args})$0"
    },
    {
      "trigger": "net.createConnection",
      "contents": "net.createConnection(${1:...args})$0"
    },
    {
      "trigger": "net.createServer",
      "contents": "net.createServer(${1:options}, ${2:connectionListener})$0"
    },
    {
      "trigger": "net.isIP",
      "contents": "net.isIP()$0"
    },
    {
      "trigger": "net.isIPv4",
      "contents": "net.isIPv4()$0"
    },
    {
      "trigger": "net.isIPv6",
      "contents": "net.isIPv6()$0"
    },
    {
      "trigger": "net.Server",
      "contents": "net.Server(${1:options}, ${2:connectionListener})$0"
    },
    {
      "trigger": "net.Socket",
      "contents": "net.Socket(${1:options})$0"
    },
    {
      "trigger": "net.Stream",
      "contents": "net.Stream(${1:options})$0"
    },
    {
      "trigger": "path.resolve",
      "contents": "path.resolve ${1:base}, '${2:name}'"
    },
    {
      "trigger": "path.isAbsolute",
      "contents": "path.isAbsolute(${1:name})$0"
    },
    {
      "trigger": "path.join",
      "contents": "path.join ${1:base}, '${2:name}'"
    },
    {
      "trigger": "path.dirname",
      "contents": "path.dirname ${1:name}"
    },
    {
      "trigger": "readline.Interface",
      "contents": "readline.Interface(${1:input}, ${2:output}, ${3:completer}, ${4:terminal})$0"
    },
    {
      "trigger": "readline.createInterface",
      "contents": "readline.createInterface(${1:input}, ${2:output}, ${3:completer}, ${4:terminal})$0"
    },
    {
      "trigger": "stream.Readable",
      "contents": "stream.Readable(${1:options})$0"
    },
    {
      "trigger": "stream.Writable",
      "contents": "stream.Writable(${1:options})$0"
    },
    {
      "trigger": "stream.Duplex",
      "contents": "stream.Duplex(${1:options})$0"
    },
    {
      "trigger": "stream.Transform",
      "contents": "stream.Transform(${1:options})$0"
    }
  ]
}