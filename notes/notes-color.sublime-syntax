%YAML 1.2
---
name: Notes
file_extensions:
  - notes
scope: source.notes
contexts:
  main:
    # code
    # - match: '(\[)(actionscript|as)(\])'
    #   comment: Actionscript
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(actionscript|as))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.actionscript.2
    # - match: '(\[)(applescript)(\])'
    #   comment: Applescript
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(applescript))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.applescript
    # - match: '(\[)(asp|asa)(\])'
    #   comment: ASP
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(asp|asa))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.asp
    # - match: '(\[)(c)(\])'
    #   comment: C
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(c))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.c
    # - match: '(\[)(cs|c#|csharp)(\])'
    #   comment: "C#"
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(cs|c#|csharp))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.cs
    # - match: '(\[)(c\+\+|cpp|cc|cxx)(\])'
    #   comment: C++
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(c\+\+|cpp|cc|cxx))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.c++
    # - match: '(\[)(clj|clojure)(\])'
    #   comment: Clojure
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(clj|clojure))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.clojure
    - match: '(\[)(css)(\])'
      comment: CSS
      captures:
        1: string.regexp.notes
        2: markup.bold.notes
        3: string.regexp.notes
      push:
        - match: '(\[)(\\?\/?(css))(\])'
          captures:
            1: string.regexp.notes
            3: markup.bold.notes
            4: string.regexp.notes
          pop: true
        - include: scope:source.css
    # - match: '(\[)(di)(\])'
    #   comment: D
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(di))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.d
    # - match: '(\[)(erl|hrl|Emakefile|emakefile|)(\])'
    #   comment: Erlang
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(erl|hrl|Emakefile|emakefile|))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.erlang
    # - match: '(\[)(go|golang)(\])'
    #   comment: Go
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(go|golang))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.go
    # - match: '(\[)(groovy|gvy)(\])'
    #   comment: Groovy
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(groovy|gvy))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.groovy
    # - match: '(\[)(hs|haskell)(\])'
    #   comment: Haskell
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(hs|haskell))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.haskell
    - match: '(\[)(html)(\])'
      comment: HTML
      captures:
        1: string.regexp.notes
        2: markup.bold.notes
        3: string.regexp.notes
      push:
        - match: '(\[)(\\?\/?(html))(\])'
          captures:
            1: string.regexp.notes
            3: markup.bold.notes
            4: string.regexp.notes
          pop: true
        - include: scope:text.html.basic
    - match: '(\[)(java|bsh)(\])'
      comment: Java
      captures:
        1: string.regexp.notes
        2: markup.bold.notes
        3: string.regexp.notes
      push:
        - match: '(\[)(\\?\/?(java|bsh))(\])'
          captures:
            1: string.regexp.notes
            3: markup.bold.notes
            4: string.regexp.notes
          pop: true
        - include: scope:source.java
    - match: ^(<<)$
      comment: Coffeescript
      captures:
        1: string.regexp.notes
        2: markup.bold.notes
        3: string.regexp.notes
      push:
        - match: ^(>>)$
          captures:
            1: string.regexp.notes
            3: markup.bold.notes
            4: string.regexp.notes
          pop: true
        - include: scope:source.coffee
    - match: '(\[)(js)(\])'
      comment: Javascript
      captures:
        1: string.regexp.notes
        2: markup.bold.notes
        3: string.regexp.notes
      push:
        - match: '(\[)(\\?\/?(js))(\])'
          captures:
            1: string.regexp.notes
            3: markup.bold.notes
            4: string.regexp.notes
          pop: true
        - include: scope:source.js
    - match: '(\[)(proto)(\])'
      comment: Javascript
      captures:
        1: string.regexp.notes
        2: markup.bold.notes
        3: string.regexp.notes
      push:
        - match: '(\[)(\\?\/?(proto))(\])'
          captures:
            1: string.regexp.notes
            3: markup.bold.notes
            4: string.regexp.notes
          pop: true
        - include: scope:source.proto
    # - match: '(\[)(lua)(\])'
    #   comment: Lua
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(lua))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.lua
    # - match: '(\[)(gnumakefile|makefile|makefile|ocamlmakefile|make)(\])'
    #   comment: Makefile
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(gnumakefile|makefile|makefile|ocamlmakefile|make))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.makefile
    # - match: '(\[)(mdown|markdown|markdn|md)(\])'
    #   comment: Markdown
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(mdown|markdown|markdn|md))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:text.html.markdown
    # - match: '(\[)(matlab)(\])'
    #   comment: Matlab
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(matlab))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.matlab
    # - match: '(\[)(objective-c|objc|m|h)(\])'
    #   comment: Objective-c
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(objective-c|objc|m|h))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.objc
    # - match: '(\[)(ocaml|ml|mli)(\])'
    #   comment: Ocaml
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(ocaml|ml|mli))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.ocaml
    # - match: '(\[)(p|pas|pascal)(\])'
    #   comment: Pascal
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(p|pas|pascal))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.pascal
    # - match: '(\[)(pm|pl|pod|t|perl)(\])'
    #   comment: Perl
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(pm|pl|pod|t|perl))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.perl
    # - match: '(\[)(php)(\])'
    #   comment: PHP
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(php))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.php
    - match: '(\[)(cpy|py|python|rpy|pyw)(\])'
      comment: Python
      captures:
        1: string.regexp.notes
        2: markup.bold.notes
        3: string.regexp.notes
      push:
        - match: '(\[)(\\?\/?(cpy|py|python|rpy|pyw))(\])'
          captures:
            1: string.regexp.notes
            3: markup.bold.notes
            4: string.regexp.notes
          pop: true
        - include: scope:source.python
    # - match: '(\[)(r|s|rprofile)(\])'
    #   comment: R
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(r|s|rprofile))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.r
    # - match: '(\[)(re|regex|regexp)(\])'
    #   comment: Regex
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(re|regex|regexp))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.regexp
    # - match: '(\[)(rb|rbx|rjs|ruby|Rakefile|rake|cgi|fcgi|gemspec|irbrc|capfile|gemfile)(\])'
    #   comment: Ruby
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(rb|rbx|rjs|ruby|Rakefile|rake|cgi|fcgi|gemspec|irbrc|capfile|gemfile))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.ruby
    # - match: '(\[)(scala)(\])'
    #   comment: Scala
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(scala))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.scala
    # - match: '(\[)(sh|bash|zsh|bashrc)(\])'
    #   comment: Shell
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(sh|bash|zsh|bashrc))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.shell
    # - match: '(\[)(sql|dml|ddl|mysql)(\])'
    #   comment: SQL
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(sql|dml|ddl|mysql))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.sql
    # - match: '(\[)(tcl)(\])'
    #   comment: TCL
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(tcl))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.tcl
    # - match: '(\[)(tex|latex|sty|cls)(\])'
    #   comment: TeX
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(tex|latex|sty|cls))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:text.tex
    # - match: '(\[)(xml|tld|jsp|pt|cpt|dtml|rss|opml)(\])'
    #   comment: XML
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(xml|tld|jsp|pt|cpt|dtml|rss|opml))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:text.xml
    # - match: '(\[)(yaml|yml)(\])'
    #   comment: YAML
    #   captures:
    #     1: string.regexp.notes
    #     2: markup.bold.notes
    #     3: string.regexp.notes
    #   push:
    #     - match: '(\[)(\\?\/?(yaml|yml))(\])'
    #       captures:
    #         1: string.regexp.notes
    #         3: markup.bold.notes
    #         4: string.regexp.notes
    #       pop: true
    #     - include: scope:source.yaml

    # definitions and comments
    - match: |-
        ^(\s)*(\-|\.|\+)( )[\w\.\-@$& ]{1,25}:
      comment: definition list
      scope: bred
    - match: |-
        (?<!\:)(\/\/.*)
      comment: Comments
      scope: comment

    #  headers & breakers
    - match: '^(\-[\-\=]{2}.*)'
      comment: Line breaks
      scope: bblue
    - match: '^\s*(\#+[^\#]*\#*)'
      comment: Highlights
      scope: bblue
    - match: '(?![a-zA-Z])\!+[^\!\n\r]+\!*'
      comment: warning/critical
      scope: important

    # ordered, unordered, completed list
    - match: ^\s*[xv]( ).+$
      comment: completed list
      scope: comment
    - match: ^\s*[::\-\.\+]\s
      comment: unordered list
      scope: bred
    - match: ^\s*[\w]+(\. )
      comment: ordered list
      scope: bred

    # stand alone definition - need to be behind completed list
    - match: |-
        ^\s*[\w\.\-@%$& ]{1,25}:
      comment: stand alone definition
      scope: bred

    # special words or symbols
    - match: \b(https?|ftp):\/\/[\w\.\/\-#:=\?@]+
      comment: url
      scope: yellow
    - match: |-
        \s(ie\.|ex\.|-+>|=+>|<=+|<-+)( )
      comment: special key words
      scope: bred

    # strings emphasis
    # - match: '(\*+[a-zA-Z \t]+\*+)'
    #   comment: string * *
    #   scope: dyellow
    # - match: '(\<[^\>]*\>)'
    #   comment: string < >
    #   scope: dyellow
    # - match: '(\`[^\`]*\`)'
    #   comment: string back tics
    #   scope: dyellow
    # - match: '(\"[^\"]*\")'
    - match: (\")([^\"]*)(\")
      comment: string " "
      captures:
        1: red
        2: dyellow
        3: red
    - match: |-
        (\()([^\)]*)(\))
      comment: string ( )
      captures:
        1: red
        2: pink
        3: red
    - match: |-
        (\{)([^\}]*)(\})
      comment: string { }
      captures:
        1: red
        2: lime
        3: red